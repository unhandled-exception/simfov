
{$O+,F+}

Unit PGcvsFLD ;   { ВЫБОР ЗВЕЗД  Gcvs }
                  { ================= }


  InterFace

    Uses  PVAR, PVarMenu, V_CATAL, PPRENew, PMem, PProFld ;


    Procedure GcvsFLD ;


  Implementation


    Procedure GcvsFLD ;
   {*****************}


    Label EndMemory ;

    Var
         Cat, SdS           : Byte    ;

         NumRa,
         NumDec,
         NFildRa,
         NFildDec,
         JRa, JDec,
         JStar,
         JNBeg, JNEnd,
         NRa,
         NBeg , NEnd,
         N1, N2             : LongInt ;

         Mv,
         ADECC,
         SDD,
         RAMIN, RAMax,
         RAMIN1, RAMax1, RAMIN2, RAMax2,
         R0, DRA, DECTEK,
         SRAFILD, CRAFILD, SDECFILD, CDECFILD,
         SDRA, CDRA, SDDEC, CDDEC,
         SRaSt, CRaSt,
         SDecSt, CDecSt,
         XSt, YSt,
         DecMin, DecMax,
         ST, CT,
         SDA, CDA,
         SPOZ, CPOZ,
         TGRO,
         XRect, YRect, ZRect,
         X1, Y1, Z1,
         X2, Y2, Z2,
         Index              : Double  ;

     Begin  { PRO STARFLD }


        FileMode := 0 ;

        Assign    ( GcvsFile    ,  ParamDir.GcvsDir + '\' + CatFile.GcvsFileName  ) ;
        Reset     ( GcvsFile                                             ) ;
        Assign    ( GcvsKeyFile ,  ParamDir.GcvsDir + '\' + CatFile.GcvsKeyFileName  ) ;
        Reset     ( GcvsKeyFile                                             ) ;


        IndCat [ CatGcvs ].RoDet := Param.RoGcvsDet ;



          { Позиционный угол Севеpного Полюса }
          { ───────────────────────────────── }

        Povorot ( JdGcvsCat, SPozNp1, CPozNp1 ) ;

        IndCat [ CatGcvs ].JdCat   := JdGcvsCat ;

        IndCat [ CatGcvs ].SPozNp1 := SPozNp1   ;
        IndCat [ CatGcvs ].CPozNp1 := CPozNp1   ;



        { ОПРЕДЕЛЕНИЕ ГРАНИЦ ОБЛАСТИ В КАТАЛОГЕ }
        { ************************************* }


            RAOPTFLD   := RAOPT   ;
            DECLOPTFLD := DECLOPT ;

            PRENew ( JDATEFLD, JdGcvsCat, RAOPTFLD, DECLOPTFLD );
           {===================================================}

            SDECLOPTFLD := SIN ( DECLOPTFLD ) ;
            CDECLOPTFLD := COS ( DECLOPTFLD ) ;

            SRAOPTFLD   := SIN ( RAOPTFLD   ) ;
            CRAOPTFLD   := COS ( RAOPTFLD   ) ;


            NUMRA  := 1 ;
            ADECC  := ABS ( DECLOPTFLD ) ;

            DECMIN := DECLOPTFLD - ROMAX ;
            DECMAX := DECLOPTFLD + ROMAX ;


	    If ( ADECC  >  DECCKR )  Then

              Begin  {  POL  }
                     { ----- }


                  SDD := CROMAX * ABS ( SDECLOPTFLD ) ;
                  SDD := SDD - SROMAX * CDECLOPTFLD * YMAX / XMAX ;

	          DECMIN := ARCTAN ( SDD / SQRT ( 1.0 - SDD * SDD ) ) ;
	          DECMAX := ABS ( DECLOPTFLD ) + ROMAX ;

                  If ( DECLOPTFLD < 0.0 )  Then

                     Begin

                      DECMAX := - DECMIN ;
                      DECMIN := - R90    ;

                     End

                   Else

                     DECMAX := R90 ;


 	          RAMIN1 := 0.0;
	          RAMAX1 := R359;

              End  { ABS ( DECLOPTFLD ) > DECCKR }

            Else

              Begin  { NO POLE }
                     { ------- }

                DRA := SROMAX / CDECLOPTFLD;
	        DRA := ARCTAN ( DRA / SQRT ( 1.0 - DRA * DRA ) );

	        RAMIN1 := RAOPTFLD - DRA;
	        RAMAX1 := RAOPTFLD + DRA;


	        If ( RAMIN1 <  0.0 )  Then  RAMIN1 := RAMIN1 + R360;
	        If ( RAMAX1 > R360 )  Then  RAMAX1 := RAMAX1 - R360;

	        If ( RAMIN1 > RAMAX1 )  Then

                  Begin  { RAMIN1 > RAMAX1 }

	            RAMIN2 := RAMIN1;
	            RAMIN1 := 0.0;
	            RAMAX2 := R359;
	            NUMRA  := 2;

                  End ;  { RAMIN1 > RAMAX1 }

              End ;  { ABS ( DECLOPTFLD )  <=  DECCKR }



	    N1 := TRUNC ( ( DECMIN * RG + 90.0 ) / STEPGR ) - 1;
	    N2 := TRUNC ( ( DECMAX * RG + 90.0 ) / STEPGR ) - 1;

	    NUMDEC := N2 - N1 + 1;


        { КОНЕЦ  ОПРЕДЕЛЕНИЯ  ГРАНИЦ  ОБЛАСТИ  В  КАТАЛОГЕ }
        { ------------------------------------------------ }



	For  JDEC := 1 To  NUMDEC  Do

         Begin  { JDEC }

	  DECTEK := DECMIN + ( JDEC - 1 ) * STEPRAD;

          NFILDDEC := TRUNC ( ( DECTEK * RG + STEPGR + 90.0 ) / STEPGR ) ;
          SDECFILD := SinDecFild [ NFILDDEC ] ;
          CDECFILD := SQRT ( 1.0 - SDECFILD * SDECFILD ) ;


	  For  JRA := 1  To  NUMRA  Do

           Begin  { JRA }

	    If ( JRA = 2 )  Then
              Begin { JRA = 2 }
		RAMIN := RAMIN2;
		RAMAX := RAMAX2;
              End  { JRA = 2 }
             Else
              Begin  { JRA <> 2 }
		RAMIN := RAMIN1;
		RAMAX := RAMAX1;
	      End ;  { JRA <> 2 }


              { ВЫЧИСЛЕНИЕ НАЧАЛА И КОНЦА ИНФОРМАЦИИ В КАТАЛОГЕ }
              { ----------------------------------------------- }


	    NBEG :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
            NBEG := NBEG + TRUNC ( ( RAMIN  * RG + STEPGR ) / STEPGR ) -  1     ;

	    NEND :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
     	    NEND := NEND + TRUNC ( ( RAMAX  * RG + STEPGR ) / STEPGR ) -  1     ;


            For  NRA := NBEG  To  NEND  Do

            Begin  { NRA }

             Seek ( GcvsKeyFile , NRA       ) ;
             Read ( GcvsKeyFile , KeyRecord ) ;

                 JNBEG := KeyRecord.NBEG     ;

             Read ( GcvsKeyFile , KeyRecord ) ;

                 JNEND := KeyRecord.NBEG - 1 ;


	    If ( JNEND >= JNBEG )  Then

            Begin { JEND >= JNBEG }

             NFILDRA := TRUNC ( ( RAMIN  * RG + STEPGR * ( NRA - NBEG + 1 ) )
                                              / STEPGR                      ) ;


             SRAFILD := SinRaFild [ NFILDRA ] ;
             CRAFILD := CosRaFild [ NFILDRA ] ;




		{  ПРОСМОТР  ЗВЕЗД  Gcvs  }
                {  ====================  }


             Seek ( GcvsFile , JNBEG - 1 ) ;


	     For  JSTAR := JNBEG  To  JNEND  Do
             Begin  { JSTAR }

              Read ( GcvsFile , GcvsRecord) ;

              Mv := GcvsRecord.MvMax / 10.0 ;

              If ( MV <= MVMAX )  Then
              Begin  { MV <= MVMAX }

               SDRA   := GcvsRecord.SDRA  / CONSTDSIN ;
               SDDEC  := GcvsRecord.SDDEC / CONSTDSIN ;

               CDRA   := SQRT ( 1.0 - SDRA  * SDRA  ) ;
               CDDEC  := SQRT ( 1.0 - SDDEC * SDDEC ) ;


               CAT    := GcvsRecord.Cat ;

               SDS    := CAT Mod 2 ;
                 If ( SDS = 1 )  Then SDRA  := - SDRA  ;

               CAT    := CAT Div 2 ;

               SDS    := CAT Mod 2 ;
                 If ( SDS = 1 )  Then SDDEC := - SDDEC ;

               CAT    := CAT Div 2 ;


               SRaSt  := SRAFILD  * CDRA  + CRAFILD  * SDRA  ;
               CRaSt  := CRAFILD  * CDRA  - SRAFILD  * SDRA  ;

               SDecSt := SDECFILD * CDDEC + CDECFILD * SDDEC ;
               CDecSt := CDECFILD * CDDEC - SDECFILD * SDDEC ;

{
	       CDA := CRaSt * CRaOptFld  +  SRaSt * SRaOptFld ;
	       SDA := SRaSt * CRaOptFld  -  CRaSt * SRaOptFld ;

	       CRO := SDeclOptFld * SDecSt  +  CDeclOptFld * CDecSt * CDA ;

	       SPoz  := CDecSt * SDA ;
	       CPoz  := SDecSt * CDeclOptFld - CDecSt * SDeclOptFld * CDA ;

	       YSt :=   FD * CPoz / CRO ;
	       XSt := - FD * SPoz / CRO ;
}

               XRect :=   CRaSt * CDecSt  ;
               YRect :=   SRaSt * CDecSt  ;
               ZRect :=   SDecSt          ;

               X1    := - XRect * SRaOptFld + YRect * CRaOptFld  ;
               Y1    := - XRect * CRaOptFld - YRect * SRaOptFld  ;
               Z1    :=   ZRect                                  ;

               X2    :=   X1                                     ;
               Y2    :=   Y1 * SDeclOptFld + Z1 * CDeclOptFld    ;
               Z2    := - Y1 * CDeclOptFld + Z1 * SDeclOptFld    ;

               XSt   := - Fd * X2 / Z2  ;
               YSt   :=   Fd * Y2 / Z2  ;


                { Повоpот Экв Сист JdCat -> Экв Сист JdFld }
                { ──────────────────────────────────────── }

               Index :=   XSt ;
               XSt   :=   XSt  * CPozNp1  -  YSt * SPozNp1 ;
               YSt   :=  Index * SPozNp1  +  YSt * CPozNp1 ;

                  { Ось 'Y' в полюсе JdFld }



               If ( Not ( NPolFix ) )   Then
                   Begin { Стабилизация оси Y в зенит }
                         { ────────────────────────── }
                     Index := XSt ;

                     XSt :=   XSt  * CPozNp  -  YSt * SPozNp ;
                     YSt :=  Index * SPozNp  +  YSt * CPozNp ;

                   End ;

{
               If ( BOlValMenu )  Then
                 Begin
                   XSt := XSt + XSt * Frac ( YSt ) ;
                   YSt := YSt + YSt * Frac ( XSt ) ;
                 End ;
}

               If (    ( Abs ( XSt ) < XMax )
                   And ( Abs ( YSt ) < YMax ) )  Then
                 Begin  { XSt, YSt  < X(Y)MAX }

                   If  ( NumberOfStars Mod ObjectBlockSize = 0 )  Then
                     CBlock :=  NumberOfStars Div ObjectBlockSize ;

                   If (    ( BlockAllocFlag [ CBlock ] )
                        Or (  AllocBlock               )  )
                     Then
                       Begin

                         With ObjectPtr[NumberOfStars Div ObjectBlockSize]^
                                       [NumberOfStars Mod ObjectBlockSize] Do
                           Begin  { Очередная звезда }

                             X    := XST ;
                             Y    := YST ;

                             Sp   := 100 ;
                             M    := Round ( ( MV + 5 ) * 10 ) ;
                             Date := Round (
                                     ( GcvsRecord.MvMin / 10.0 + 5 ) * 10 ) ;

                             NRecC    := JStar ;

                           End ;

                         If ( IndCat [ CatGcvs ].NBEG = -1 )  Then
                              IndCat [ CatGcvs ].NBEG := NumberOfStars ;

                         NumberOfStars  :=  NumberOfStars  +   1 ;

                       End   { Блок выделен }

                     Else

                         GoTo EndMemory ;  { Исчеpпана память }

                 End ;  { XST, YST  < X(Y)MAX }

              End ;  { MV < MVMAX }

             End ; { JSTAR }

            End ; { JEND >= JNBEG }

            End ;  { NRA  }

           End ; { JRA }

         End ; { JDEC }

 EndMemory : ;

     Close ( GcvsFile    ) ;
     Close ( GcvsKeyFile ) ;

     FileMode := 2 ;


     If ( IndCat [ CatGcvs ].NBeg <> -1 )  Then
       Begin
          IndCat [ CatGcvs ].NEnd      := NumberOfStars - 1 ;
          IndCat [ CatGcvs ].TypeCoord := IdCoord           ;
       End ;

    End ;  { PRO GcvsFLD }

End.

