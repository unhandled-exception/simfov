
{$O+,F+}

Unit PHdFld ;     { ВЫБОР ЗВЕЗД  H D }
                  { ================ }


  InterFace



    Procedure HdFld ;


  Implementation

    Uses  PVAR, PVarMenu, V_CATAL, PPRENew, PMem, PProFld ;

    Procedure HdFld ;
   {****************}


    Label EndMemory ;

    Var

         HdKeyRecord   :          KeyType    ;
         HdRecord      : HdType              ;

         HdFile        : File Of HdType      ;
         HdKeyFile     : File Of KeyType     ;
         HdEKeyFile    : File Of KeyType     ;

         SpStr         : String [ 2 ] ;

         Index,
         Mv,
         ADECC,
         SDD,
         RAMIN, RAMax,
         RAMIN1, RAMax1,
         RAMIN2, RAMax2,
         R0, DRA, DECTEK,
         SRAFILD, CRAFILD,
         SDECFILD, CDECFILD,
         SDRA, CDRA,
         SDDEC, CDDEC,
         XSt, YSt,
         SRaSt, CRaSt,
         SDecSt, CDecSt,
         DecMin, DecMax,
         SP, CP,
         SG, CG,
         DTMU,
         DDeclPm,
         P,S, CS, SS,
         ST, CT,
         SDA, CDA,
         SPOZ, CPOZ,
         TGRO,
         XRect, YRect, ZRect,
         X1, Y1, Z1,
         X2, Y2, Z2,
         Mr, Md                             : Double ;

         Spectr,
         Cat, SdS                           : Byte   ;

         NumRa,
         NumDec,
         NFildRa,
         NFildDec,
         JRa, JDec,
         JStar,
         JNBeg, JNEnd,
         NRa,
         NBeg , NEnd,
         N1, N2                             : LongInt ;



  Begin  { PRO STARFLD }


    Assign  ( HdFile    , ParamDir.HdDir + '\' + CatFile.HdFileName    ) ;
    Reset   ( HdFile                                                   ) ;

    Assign  ( HdKeyFile , ParamDir.HdDir + '\' + CatFile.HdKeyFileName ) ;
    Reset   ( HdKeyFile                                                ) ;


    IndCat [ CatHd ].RoDet := Param.RoHdDet ;

    DTMU := ( JDate - JdHdCat ) / 365.25 ;



          { Позиционный угол Севеpного Полюса }
          { ───────────────────────────────── }

    Povorot ( JdHdCat, SPozNp1, CPozNp1 ) ;

    IndCat [ CatHd ].JdCat   := JdHdCat ;

    IndCat [ CatHd ].SPozNp1 := SPozNp1 ;
    IndCat [ CatHd ].CPozNp1 := CPozNp1 ;


    RaOptFld   := RaOpt   ;
    DeclOptFld := DeclOpt ;

    PRENew ( JDateFld, JdHdCat, RaOptFld, DeclOptFld );
    {=================================================}

    SDeclOptFld := Sin ( DeclOptFld ) ;
    CDeclOptFld := Cos ( DeclOptFld ) ;

    SRaOptFld   := Sin ( RaOptFld   ) ;
    CRaOptFld   := Cos ( RaOptFld   ) ;

    IndCat [ CatHD ].SRaOpt    := SRaOptFld   ;
    IndCat [ CatHD ].CRaOpt    := CRaOptFld   ;
    IndCat [ CatHD ].SDeclOpt  := SDeclOptFld ;
    IndCat [ CatHD ].CDeclOpt  := CDeclOptFld ;




        { ОПРЕДЕЛЕНИЕ ГРАНИЦ ОБЛАСТИ В КАТАЛОГЕ }
        { ************************************* }



    NUMRA  := 1 ;
    ADECC  := ABS ( DECLOPTFLD ) ;

    DECMIN := DECLOPTFLD - ROMAX ;
    DECMAX := DECLOPTFLD + ROMAX ;

    If ( B_Import_Fld )
      Then  DDeclPM := 10.0 / SekRad * Abs ( DtMu )
      Else  DDeclPm :=  0.0 ;

    DecMin  := DecMin - DDeclPm ;
    DecMax  := DecMax + DDeclPm ;


    If ( ADECC  >  DECCKR )
      Then
        Begin  {  POL  }
               { ----- }


          SDD := CROMAX * ABS ( SDECLOPTFLD ) ;
          SDD := SDD - SROMAX * CDECLOPTFLD * YMAX / XMAX ;

	  DECMIN := ARCTAN ( SDD / SQRT ( 1.0 - SDD * SDD ) ) ;
	  DECMAX := ABS ( DECLOPTFLD ) + ROMAX ;

          If ( DECLOPTFLD < 0.0 )
            Then
              Begin

                DECMAX := - DECMIN ;
                DECMIN := - R90    ;

              End
            Else

                DECMAX := R90 ;


 	  RAMIN1 := 0.0;
	  RAMAX1 := R359;

        End  { ABS ( DECLOPTFLD ) > DECCKR }
      Else
        Begin  { NO POLE }
               { ------- }

          DRA := SROMAX / CDECLOPTFLD;
	  DRA := ARCTAN ( DRA / SQRT ( 1.0 - DRA * DRA ) );
          DRa := DRa + DDeclPm ;


	  RAMIN1 := RAOPTFLD - DRA;
	  RAMAX1 := RAOPTFLD + DRA;


	  If ( RAMIN1 <  0.0 )  Then
            RAMIN1 := RAMIN1 + R360;

	  If ( RAMAX1 > R360 )  Then
            RAMAX1 := RAMAX1 - R360;

	  If ( RAMIN1 > RAMAX1 )  Then
            Begin  { RAMIN1 > RAMAX1 }

              RAMIN2 := RAMIN1;
              RAMIN1 := 0.0;
              RAMAX2 := R359;
              NUMRA  := 2;

            End ;  { RAMIN1 > RAMAX1 }

        End ;  { ABS ( DECLOPTFLD )  <=  DECCKR }


    N1 := TRUNC ( ( DECMIN * RG + 90.0 ) / STEPGR ) - 1;
    N2 := TRUNC ( ( DECMAX * RG + 90.0 ) / STEPGR ) - 1;

    NUMDEC := N2 - N1 + 1;


        { КОНЕЦ  ОПРЕДЕЛЕНИЯ  ГРАНИЦ  ОБЛАСТИ  В  КАТАЛОГЕ }
        { ------------------------------------------------ }



    For  JDEC := 1 To  NUMDEC  Do
      Begin  { JDEC }

        DECTEK := DECMIN + ( JDEC - 1 ) * STEPRAD;

        NFILDDEC := TRUNC ( ( DECTEK * RG + STEPGR + 90.0 ) / STEPGR ) ;
        SDECFILD := SinDecFild [ NFILDDEC ] ;
        CDECFILD := SQRT ( 1.0 - SDECFILD * SDECFILD ) ;


	For  JRA := 1  To  NUMRA  Do
          Begin  { JRA }

	    If ( JRA = 2 )
              Then
                Begin { JRA = 2 }
		  RAMIN := RAMIN2;
		  RAMAX := RAMAX2;
                End  { JRA = 2 }
              Else
                Begin  { JRA <> 2 }
		  RAMIN := RAMIN1;
		  RAMAX := RAMAX1;
	        End ;  { JRA <> 2 }


               { ВЫЧИСЛЕНИЕ НАЧАЛА И КОНЦА ИНФОРМАЦИИ В КАТАЛОГЕ }
               { ----------------------------------------------- }


	    NBEG :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
            NBEG := NBEG + TRUNC ( ( RAMIN  * RG + STEPGR ) / STEPGR ) -  1     ;

	    NEND :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
     	    NEND := NEND + TRUNC ( ( RAMAX  * RG + STEPGR ) / STEPGR ) -  1     ;


            For  NRA := NBEG  To  NEND  Do
              Begin  { NRA }

                Seek ( HdKeyFile , NRA       ) ;
                Read ( HdKeyFile , KeyRecord ) ;

                JNBEG := KeyRecord.NBEG     ;

                Read ( HdKeyFile , KeyRecord ) ;

                JNEND := KeyRecord.NBEG - 1 ;


	        If ( JNEND >= JNBEG )  Then
                  Begin { JEND >= JNBEG }

                    NFILDRA := TRUNC ( (  RAMIN  * RG
                                        + STEPGR * ( NRA - NBEG + 1 ) )
                                        / STEPGR                      ) ;

                    SRAFILD := SinRaFild [ NFILDRA ] ;
                    CRAFILD := CosRaFild [ NFILDRA ] ;




                    {  ПРОСМОТР  ЗВЕЗД  Hd  }
                    {  ====================  }


                    Seek ( HdFile , JNBEG - 1 ) ;


	            For  JSTAR := JNBEG  To  JNEND  Do
                      Begin  { JSTAR }

                        Read ( HdFile , HdRecord) ;

                        MV     := HdRecord.MV / 10.0 - 5.0 ;


                        If (     ( Mv >= MvMin )
                             And ( Mv <= MvMax ) )  Then
                          Begin  { MV <= MVMAX }

                            SDRA   := HdRecord.SDRA  / CONSTDSIN ;
                            SDDEC  := HdRecord.SDDEC / CONSTDSIN ;

                            CDRA   := SQRT ( 1.0 - SDRA  * SDRA  ) ;
                            CDDEC  := SQRT ( 1.0 - SDDEC * SDDEC ) ;

                            CAT    := HdRecord.Cat ;

                            SDS    := CAT Mod 2 ;
                            If ( SDS = 1 )  Then
                              SDRA  := - SDRA  ;

                            CAT    := CAT Div 2 ;

                            SDS    := CAT Mod 2 ;
                            If ( SDS = 1 )  Then
                              SDDEC := - SDDEC ;


                            SRaSt  := SRAFILD  * CDRA  + CRAFILD  * SDRA  ;
                            CRaSt  := CRAFILD  * CDRA  - SRAFILD  * SDRA  ;

                            SDecSt := SDECFILD * CDDEC + CDECFILD * SDDEC ;
                            CDecSt := CDECFILD * CDDEC - SDECFILD * SDDEC ;

{
	                    CDA := CRaSt * CRaOptFld  +  SRaSt * SRaOptFld ;
	                    SDA := SRaSt * CRaOptFld  -  CRaSt * SRaOptFld ;

	                    CRO := SDeclOptFld * SDecSt  +  CDeclOptFld * CDecSt * CDA ;

	                    SPoz  := CDecSt * SDA ;
	                    CPoz  := SDecSt * CDeclOptFld - CDecSt * SDeclOptFld * CDA ;

	                    YSt :=   FD * CPoz / CRO ;
	                    XSt := - FD * SPoz / CRO ;
}

                            XRect :=   CRaSt * CDecSt  ;
                            YRect :=   SRaSt * CDecSt  ;
                            ZRect :=   SDecSt          ;

                            X1    := - XRect * SRaOptFld + YRect * CRaOptFld  ;
                            Y1    := - XRect * CRaOptFld - YRect * SRaOptFld  ;
                            Z1    :=   ZRect                                  ;

                            X2    :=   X1                                     ;
                            Y2    :=   Y1 * SDeclOptFld + Z1 * CDeclOptFld    ;
                            Z2    := - Y1 * CDeclOptFld + Z1 * SDeclOptFld    ;

                            XSt   := - Fd * X2 / Z2  ;
                            YSt   :=   Fd * Y2 / Z2  ;


                            { Повоpот Экв Сист JdCat -> Экв Сист JdFld }
                            { ──────────────────────────────────────── }

                            Index :=   XSt ;
                            XSt   :=   XSt  * CPozNp1  -  YSt * SPozNp1 ;
                            YSt   :=  Index * SPozNp1  +  YSt * CPozNp1 ;

                            { Ось 'Y' в полюсе JdFld }



                            If ( Not ( NPolFix ) )   Then
                              Begin { Стабилизация оси Y в зенит }
                                    { ────────────────────────── }
                                Index := XSt ;

                                XSt :=   XSt  * CPozNp  -  YSt * SPozNp ;
                                YSt :=  Index * SPozNp  +  YSt * CPozNp ;

                              End ;


                            If (    ( Abs ( XSt ) < XMax )
                                And ( Abs ( YSt ) < YMax ) )  Then
                              Begin  { XSt, YSt  < X(Y)MAX }
                                     { ------------------- }

                                If  ( NumberOfStars Mod ObjectBlockSize = 0 )  Then
                                  CBlock :=  NumberOfStars Div ObjectBlockSize ;

                                If (    ( BlockAllocFlag [ CBlock ] )
                                     Or (  AllocBlock               )  )  Then
                                  Begin

                                    With ObjectPtr[NumberOfStars Div ObjectBlockSize]^
                                                  [NumberOfStars Mod ObjectBlockSize] Do
                                      Begin  { Очередная звезда }

                                        X     := XST ;
                                        Y     := YST ;

                                        Sp    := HdRecord.Spectr  ;
                                        M     := Round ( ( MV + 5 ) * 10 ) ;

                                        NRecC := HdRecord.DM ;

                                      End ;

                                    If ( IndCat [ CatHd ].NBEG = -1 )  Then
                                      IndCat [ CatHd ].NBEG := NumberOfStars ;

                                    NumberOfStars  :=  NumberOfStars  +   1 ;


                                  End   { Блок выделен }
                                        { ------------ }
                                 Else
                                  Begin

                                    Close  ( HdFile    ) ;
                                    Close  ( HdKeyFile ) ;

                                    GOTO EndMemory ;  { Исчеpпана память }
                                                      { ---------------- }
                                  End ;

                              End ;  { XST, YST  < X(Y)MAX }

                          End ;  { MV < MVMAX }

                      End ; { JSTAR }

                  End ; { JEND >= JNBEG }

              End ;  { NRA  }

          End ; { JRA }

      End ; { JDEC }


    Close  ( HdFile    ) ;
    Close  ( HdKeyFile ) ;


{
                           H D E
                           ▄▄▄▄▄
}


    Assign  ( HdEFile    , ParamDir.HdDir + '\' + CatFile.HdEFileName  ) ;
    Reset   ( HdEFile                                                  ) ;

    Assign  ( HdEKeyFile , ParamDir.HdDir + '\' + CatFile.HdEKeyFileName ) ;
    Reset   ( HdEKeyFile                                                 ) ;


    For  JDEC := 1 To  NUMDEC  Do
      Begin  { JDEC }

        DECTEK := DECMIN + ( JDEC - 1 ) * STEPRAD;

        NFILDDEC := TRUNC ( ( DECTEK * RG + STEPGR + 90.0 ) / STEPGR ) ;
        SDECFILD := SinDecFild [ NFILDDEC ] ;
        CDECFILD := SQRT ( 1.0 - SDECFILD * SDECFILD ) ;


	For  JRA := 1  To  NUMRA  Do
          Begin  { JRA }

	    If ( JRA = 2 )
              Then
                Begin { JRA = 2 }
		  RAMIN := RAMIN2;
		  RAMAX := RAMAX2;
                End  { JRA = 2 }
              Else
                Begin  { JRA <> 2 }
		  RAMIN := RAMIN1;
		  RAMAX := RAMAX1;
	        End ;  { JRA <> 2 }


               { ВЫЧИСЛЕНИЕ НАЧАЛА И КОНЦА ИНФОРМАЦИИ В КАТАЛОГЕ }
               { ----------------------------------------------- }


	    NBEG :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
            NBEG := NBEG + TRUNC ( ( RAMIN  * RG + STEPGR ) / STEPGR ) -  1     ;

	    NEND :=        TRUNC ( ( DECTEK * RG + 90.0   ) / STEPGR ) * NRAMAX ;
     	    NEND := NEND + TRUNC ( ( RAMAX  * RG + STEPGR ) / STEPGR ) -  1     ;


            For  NRA := NBEG  To  NEND  Do
              Begin  { NRA }

                Seek ( HdEKeyFile , NRA       ) ;
                Read ( HdEKeyFile , KeyRecord ) ;

                JNBEG := KeyRecord.NBEG     ;

                Read ( HdEKeyFile , KeyRecord ) ;

                JNEND := KeyRecord.NBEG - 1 ;


	        If ( JNEND >= JNBEG )  Then
                  Begin { JEND >= JNBEG }

                    NFILDRA := TRUNC ( (  RAMIN  * RG
                                        + STEPGR * ( NRA - NBEG + 1 ) )
                                        / STEPGR                      ) ;

                    SRAFILD := SinRaFild [ NFILDRA ] ;
                    CRAFILD := CosRaFild [ NFILDRA ] ;




                    {  ПРОСМОТР  ЗВЕЗД  HdE  }
                    {  ====================  }


                    Seek ( HdEFile , JNBEG - 1 ) ;


	            For  JSTAR := JNBEG  To  JNEND  Do
                      Begin  { JSTAR }

                        Read ( HdEFile , HdERecord) ;

                        MV     := HdERecord.MV / 10.0 - 5.0 ;


                        If (     ( Mv >= MvMin )
                             And ( Mv <= MvMax ) )  Then
                          Begin  { MV <= MVMAX }

                            SDRA   := HdERecord.SDRA  / CONSTDSIN ;
                            SDDEC  := HdERecord.SDDEC / CONSTDSIN ;

                            CDRA   := SQRT ( 1.0 - SDRA  * SDRA  ) ;
                            CDDEC  := SQRT ( 1.0 - SDDEC * SDDEC ) ;

                            CAT    := HdERecord.Cat ;

                            SDS    := CAT Mod 2 ;
                            If ( SDS = 1 )  Then
                              SDRA  := - SDRA  ;

                            CAT    := CAT Div 2 ;

                            SDS    := CAT Mod 2 ;
                            If ( SDS = 1 )  Then
                              SDDEC := - SDDEC ;


                            SRaSt  := SRAFILD  * CDRA  + CRAFILD  * SDRA  ;
                            CRaSt  := CRAFILD  * CDRA  - SRAFILD  * SDRA  ;

                            SDecSt := SDECFILD * CDDEC + CDECFILD * SDDEC ;
                            CDecSt := CDECFILD * CDDEC - SDECFILD * SDDEC ;


	                    CDA := CRaSt * CRaOptFld  +  SRaSt * SRaOptFld ;
	                    SDA := SRaSt * CRaOptFld  -  CRaSt * SRaOptFld ;

	                    CRO := SDeclOptFld * SDecSt  +  CDeclOptFld * CDecSt * CDA ;
{
	                    SPoz  := CDecSt * SDA ;
	                    CPoz  := SDecSt * CDeclOptFld - CDecSt * SDeclOptFld * CDA ;

	                    YSt :=   FD * CPoz / CRO ;
	                    XSt := - FD * SPoz / CRO ;
}

                            If ( HdERecord.MuRa <> 32000 )
                             Then
                              Begin
                                MR := HdERecord.MuRa  / 1000.0 / SekRad * DtMu ;
                                MD := HdERecord.MuDec / 1000.0 / SekRad * DtMu ;
                              End
                             Else
                              Begin
                                Mr := 0.0 ;
                                Md := 0.0 ;
                              End ;


                            XRect := CRaSt * CDecSt - Md * SDecSt * CRaSt
                                                    - Mr * SRaSt           ;
                            YRect := SRaSt * CDecSt - Md * SDecSt * SRaSt
                                                    + Mr * CRaSt           ;
                            ZRect := SDecSt         + Md * CDecSt          ;

                            X1 := - XRect * SRaOptFld + YRect * CRaOptFld  ;
                            Y1 := - XRect * CRaOptFld - YRect * SRaOptFld  ;
                            Z1 :=   ZRect                                  ;

                            X2 :=   X1                                     ;
                            Y2 :=   Y1 * SDeclOptFld + Z1 * CDeclOptFld    ;
                            Z2 := - Y1 * CDeclOptFld + Z1 * SDeclOptFld    ;

                            XSt := - Fd * X2 / Z2 ;
                            YSt :=   Fd * Y2 / Z2 ;



                            { Повоpот Экв Сист JdCat -> Экв Сист JdFld }
                            { ──────────────────────────────────────── }

                            Index :=   XSt ;
                            XSt   :=   XSt  * CPozNp1  -  YSt * SPozNp1 ;
                            YSt   :=  Index * SPozNp1  +  YSt * CPozNp1 ;

                            { Ось 'Y' в полюсе JdFld }



                            If ( Not ( NPolFix ) )   Then
                              Begin { Стабилизация оси Y в зенит }
                                    { ────────────────────────── }
                                Index := XSt ;

                                XSt :=   XSt  * CPozNp  -  YSt * SPozNp ;
                                YSt :=  Index * SPozNp  +  YSt * CPozNp ;

                              End ;


                            If (    ( Abs ( XSt ) < XMax )
                                And ( Abs ( YSt ) < YMax ) )  Then
                              Begin  { XSt, YSt  < X(Y)MAX }
                                     { ------------------- }

                                If  ( NumberOfStars Mod ObjectBlockSize = 0 )  Then
                                  CBlock :=  NumberOfStars Div ObjectBlockSize ;

                                If (    ( BlockAllocFlag [ CBlock ] )
                                     Or (  AllocBlock               )  )  Then
                                  Begin

If ( NumberOfStars = 1317 )  Then
  Spectr := 0 ;

                                    SpStr := HdERecord.Sp  ;

                                    Case SpStr [ 1 ] Of
                                      'O' : Spectr :=  0 ;
                                      'B' : Spectr := 10 ;
                                      'A' : Spectr := 20 ;
                                      'F' : Spectr := 30 ;
                                      'G' : Spectr := 40 ;
                                      'K' : Spectr := 50 ;
                                      'M' : Spectr := 60 ;
                                     Else
                                            Spectr := 70 ;
                                    End ; { Case }

                                    If ( SpStr [ 2 ] <> ' ' )  Then
                                      Spectr := Spectr +
                                          Ord ( SpStr [ 2 ] )
                                        - Ord ( '0' ) ;

                                    With ObjectPtr[NumberOfStars Div ObjectBlockSize]^
                                                  [NumberOfStars Mod ObjectBlockSize] Do
                                      Begin  { Очередная звезда }

                                        X     := XST ;
                                        Y     := YST ;

                                        M     := Round ( ( MV + 5 ) * 10 ) ;
                                        Sp    := Spectr + 100 ;
                                        NRecC := JStar  ;

                                      End ;

                                    If ( IndCat [ CatHd ].NBEG = -1 )  Then
                                      IndCat [ CatHd ].NBEG := NumberOfStars ;

                                    Inc ( NumberOfStars ) ;

                                  End   { Блок выделен }
                                        { ------------ }
                                 Else
                                  Begin

                                    Close  ( HdEFile    ) ;
                                    Close  ( HdEKeyFile ) ;

                                    GOTO EndMemory ;  { Исчеpпана память }
                                                      { ---------------- }
                                  End ;

                              End ;  { XST, YST  < X(Y)MAX }

                          End ;  { MV < MVMAX }

                      End ; { JSTAR }

                  End ; { JEND >= JNBEG }

              End ;  { NRA  }

          End ; { JRA }

      End ; { JDEC }

    Close  ( HdEFile    ) ;
    Close  ( HdEKeyFile ) ;



    EndMemory : ;


    If ( IndCat [ CatHd ].NBeg <> -1 )  Then
       Begin
          IndCat [ CatHd ].NEnd      := NumberOfStars - 1 ;
          IndCat [ CatHd ].TypeCoord := IdCoord           ;
       End ;


  End ;  { PRO HdFld }

End.

